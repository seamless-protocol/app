/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TokensRouteImport } from './routes/tokens'
import { Route as TokensIdRouteImport } from './routes/tokens.$id'
import { Route as VaultsRouteImport } from './routes/vaults'
import { Route as VaultsIdRouteImport } from './routes/vaults.$id'

const VaultsRoute = VaultsRouteImport.update({
  id: '/vaults',
  path: '/vaults',
  getParentRoute: () => rootRouteImport,
} as any)
const TokensRoute = TokensRouteImport.update({
  id: '/tokens',
  path: '/tokens',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VaultsIdRoute = VaultsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => VaultsRoute,
} as any)
const TokensIdRoute = TokensIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TokensRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/tokens': typeof TokensRouteWithChildren
  '/vaults': typeof VaultsRouteWithChildren
  '/tokens/$id': typeof TokensIdRoute
  '/vaults/$id': typeof VaultsIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/tokens': typeof TokensRouteWithChildren
  '/vaults': typeof VaultsRouteWithChildren
  '/tokens/$id': typeof TokensIdRoute
  '/vaults/$id': typeof VaultsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/tokens': typeof TokensRouteWithChildren
  '/vaults': typeof VaultsRouteWithChildren
  '/tokens/$id': typeof TokensIdRoute
  '/vaults/$id': typeof VaultsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/tokens' | '/vaults' | '/tokens/$id' | '/vaults/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/tokens' | '/vaults' | '/tokens/$id' | '/vaults/$id'
  id: '__root__' | '/' | '/dashboard' | '/tokens' | '/vaults' | '/tokens/$id' | '/vaults/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  TokensRoute: typeof TokensRouteWithChildren
  VaultsRoute: typeof VaultsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vaults': {
      id: '/vaults'
      path: '/vaults'
      fullPath: '/vaults'
      preLoaderRoute: typeof VaultsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tokens': {
      id: '/tokens'
      path: '/tokens'
      fullPath: '/tokens'
      preLoaderRoute: typeof TokensRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vaults/$id': {
      id: '/vaults/$id'
      path: '/$id'
      fullPath: '/vaults/$id'
      preLoaderRoute: typeof VaultsIdRouteImport
      parentRoute: typeof VaultsRoute
    }
    '/tokens/$id': {
      id: '/tokens/$id'
      path: '/$id'
      fullPath: '/tokens/$id'
      preLoaderRoute: typeof TokensIdRouteImport
      parentRoute: typeof TokensRoute
    }
  }
}

interface TokensRouteChildren {
  TokensIdRoute: typeof TokensIdRoute
}

const TokensRouteChildren: TokensRouteChildren = {
  TokensIdRoute: TokensIdRoute,
}

const TokensRouteWithChildren = TokensRoute._addFileChildren(TokensRouteChildren)

interface VaultsRouteChildren {
  VaultsIdRoute: typeof VaultsIdRoute
}

const VaultsRouteChildren: VaultsRouteChildren = {
  VaultsIdRoute: VaultsIdRoute,
}

const VaultsRouteWithChildren = VaultsRoute._addFileChildren(VaultsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  TokensRoute: TokensRouteWithChildren,
  VaultsRoute: VaultsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
